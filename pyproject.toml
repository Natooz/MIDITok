[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "miditok"
version = "3.0.0"
description = "MIDI / symbolic music tokenizers for Deep Learning models."
readme = "README.md"
license = "MIT"
requires-python = ">=3.8.0"
authors = [
    { name = "Nathan Fradet" },
]
keywords = [
    "artificial intelligence",
    "deep learning",
    "transformer",
    "midi",
    "tokenization",
    "music",
    "mir",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: MIDI",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy>=1.19",
    "symusic>=0.2.3",
    "tqdm",
    "tokenizers>=0.13.0",
    "huggingface_hub>=0.16.4",
]

[project.optional-dependencies]
tests = [
    "pytest-cov",
    "pytest-xdist[psutil]",
    "torch",
    "tensorflow",
    "miditoolkit",
]

[project.urls]
Homepage = "https://github.com/Natooz/MidiTok"
Documentation = "https://miditok.readthedocs.io"

[tool.hatch.version]
path = "miditok/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/miditok",
]

[tool.ruff]
target-version = "py38"
extend-select = [
    "ARG",
    "A",
    "ANN",
    "B",
    "BLE",
    "C4",
    "COM",
    # "D",
    "E",
    "F",
    "FBT",
    "FA",
    "G",
    "I",
    "INT",
    "N",
    "NPY",
    "PERF",
    "PTH",
    "PIE",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "UP",
    "W",
]

# Each specific rule exclusion should be justified here.
# By default, we think it is better to select groups of rules (above), and exclude
# specific problematic rules, instead of selecting specific rules.

# ANN003:
# Would mostly apply to args/kwargs that are passed to methods from dependencies, for
# which the signature can change depending on the version. This would either be too
# difficult to comply and/or would add a lot of noqa exceptions. ANN002 is used as it
# adds very few "noqa" exceptions, but ANN003 would add too much complexity.

# ANN101 and ANN102:
# Yields errors for `self` in methods from classes, which is unecessary.
# https://github.com/astral-sh/ruff/issues/4396

# D107
# We document classes at the class level (D101). This documentation should cover the
# way classes are initialized. So we do not document `__init__` methods.

# FBT001 and FB002
# Refactoring all the methods to make boolean arguments keyword only would add
# complexity and could break code of users. It's ok to have booleans as positional
# arguments with default values. For code redability though, we enable FB003.

# COM812:
# Yields errors for one-line portions without comma. Trailing commas are automatically
# set with ruff format anyway. This exclusion could be removed when this behavior is
# fixed in ruff.

ignore = ["ANN003", "ANN101", "ANN102", "D107", "FBT001", "FBT002", "COM812"]

[tool.ruff.per-file-ignores]
# S105: we don't use password in MidiTok, only HF token for the interactions with the
# hub. However we have a lot of variables with "token"(s) in their name, which would
# yield a lot of lint errors or require a lot of noqa exceptions.
"miditok/**" = [
    "S105",
]
"tests/**" = [
    "ANN201",  # allow no return type hint for pytest methods
    "D103",  # no need to document pytest methods
    "S101",  # allow assertions in tests
    "T201",  # print allowed
]
